#!/usr/bin/env python3
# coding=utf-8

import datetime
import email.utils
import hashlib
import lxml.html
import os
import re
import sys
import uuid
import xml.dom.minidom

import wohc

BASE_DIR = 'vv'
URL_BASE = 'https://halcanary.org'
OUTPUT_DIR = 'docs'
IMAGE = 'https://halcanary.org/images/HAL_CANARY_20191008_512.jpg'

current_year = datetime.date.today().year
first_year = 1997

def get_years():
    return '{:04d}-{:04d}'.format(first_year, current_year)

def head(title, years):
    return wohc.head(title, years=years)

top_posts_header = """
<header>
<h1>Voder-Vocoder</h1>
</header>

<div class="centered" role="contentinfo">The Log of Hal Canary</div>

<details role="search" class="rightside">
<summary>Search</summary>
<div>
<form method="get" action="https://www.google.com/search">
<input name="domains" value="halcanary.org" type="hidden">
<input name="sitesearch" value="halcanary.org" type="hidden">
<input id="search" name="q" size="30" maxlength="255" aria-labelledby="submitter">
<input value="Search" type="submit" id="submitter">
</form>
</div>
</details>

<hr>
"""

def clean(src):
    content = lxml.html.fragment_fromstring(src, True)
    content.make_links_absolute(URL_BASE + '/')
    for element in content.iter():
        if element.tag == 'img':
            style = element.attrib.get('style', '')
            element.set('style', 'max-width:100%;height:auto;' + style)
    return lxml.html.tostring(content, encoding='unicode')

def cleanText(src):
    return lxml.html.fragment_fromstring(src, True).text_content()

def makeRSS(out, posts):
    dtnow = datetime.datetime.now().astimezone().replace(microsecond=0)
    doc = xml.dom.minidom.getDOMImplementation().createDocument(None, "rss", None)
    def add(el, key, value):
        n = el.appendChild(doc.createElement(key))
        n.appendChild(doc.createTextNode(value))
        return n
    link = URL_BASE + '/' + BASE_DIR + '/'
    channel = doc.documentElement.appendChild(doc.createElement('channel'))
    doc.documentElement.setAttribute('version', '2.0')
    ATOM = 'http://www.w3.org/2005/Atom'
    doc.documentElement.setAttributeNS(xml.dom.XMLNS_NAMESPACE, 'xmlns:atom', ATOM)
    alink = channel.appendChild(doc.createElementNS(ATOM, 'atom:link'))
    alink.setAttribute('href', URL_BASE + '/vv/rss.rss')
    alink.setAttribute('rel', 'self')
    alink.setAttribute('type', 'application/rss+xml')

    add(channel, 'title', 'Voder-Vocoder')
    add(channel, 'link', link)
    add(channel, 'description', 'The Log of Hal Canary')
    add(channel, 'language', 'en-US')
    add(channel, 'copyright',
            'Copyright %d-%d Hal W. Canary. ALL RIGHTS RESERVED.' % (first_year, current_year))
    add(channel, 'pubDate', email.utils.format_datetime(dtnow))
    add(channel, 'lastBuildDate', email.utils.format_datetime(dtnow))
    image = channel.appendChild(doc.createElement('image'))
    add(image, 'url', IMAGE)
    add(image, 'title', 'Voder-Vocoder')
    add(image, 'link', link)
    for post in posts:
        if post.summary:
            contentstring = clean('<p>' + cleanText(post.summary) + '</p>\n' + post.post)
        else:
            contentstring = clean(post.post)
        item = channel.appendChild(doc.createElement('item'))
        add(item, 'title', cleanText(post.title))
        link = URL_BASE + '/' + post.permalinkpart()
        add(item, 'link', link)
        m = hashlib.sha256()
        m.update((link + contentstring).encode('utf-8'))
        add(item, 'guid', str(uuid.UUID(m.hexdigest()[:32]))).setAttribute('isPermaLink', 'false')
        add(item, 'pubDate', email.utils.format_datetime(post.timestamp))
        add(item, 'description', contentstring)
        if post.category_list:
            add(item, 'category', ','.join(post.category_list))
    doc.writexml(out, addindent='\t', newl='\n', encoding='UTF-8')

def lcr(left, center, right):
    left   = '<p>{}</p>'.format(left) if left else '&nbsp;'
    center = '<p>{}</p>'.format(center) if center else '&nbsp;'
    right  = '<p>{}</p>'.format(right) if right else '&nbsp;'
    return '''<div class="lcr">
  <div>{}</div>
  <div class="centered">{}</div>
  <div class="rightside">{}</div>
</div>'''.format(left, center, right)

class UpdatingFile(object):
    def __init__(self, path):
        self._path = path
    def __enter__(self):
        self._o = []
        return self
    def __exit__(self, type, value, traceback):
        if wohc.write_file(self._path, ''.join(self._o)):
            sys.stdout.write('modified %s\n' % self._path)
        del self._o
    def write(self, s):
        self._o.append(s)

class Post(object):
    def write(self, o, level=1, identifier=None):
        category_fmt = '<a href="/{1}/category/{0}/" class="p-category">#{0}</a>'
        categories = '; '.join(category_fmt.format(cat, BASE_DIR) for cat in self.category_list)
        if categories:
            categories = '<div>%s</div>' % categories
        # keys = [ 'src', 'permalinkpart', 'title', 'summary', 'date', 'category_list', 'post' ]
        summ = '    <p class="p-summary">{}</p>'.format(self.summary) if self.summary else ''
        post_template = """
<article id="{fragment}" class="h-entry">
  <header>
    <!-- SRC= {src} -->
    <h{level} class="blogtitle p-name">{title}</h{level}>
{summ}
    <div class="byline plainlink">
      <div>
          <div class="p-author">Hal Canary</div>
          <div><time datetime="{datetime}" class="dt-published">{date}</time></div>
          <div><a href="/{permalinkpart}" class="u-url u-uid">{URL_BASE}/{permalinkpart}</a></div>
          {categories}
      </div>
    </div>
  </header>
  <div class="content e-content">
<div style="display:none;">{summary}</div>
{post}
  </div>
</article>
<hr>
"""
        o.write(post_template.format(level=level, categories=categories, summ=summ,
                                     URL_BASE=URL_BASE, **vars(self),
                                     datetime=self.timestamp.isoformat(),
                                     permalinkpart=self.permalinkpart(),
                                     fragment=self.fragmentId(),
                                     date=self.date()))

    def __init__(self, path):
        if not os.path.isfile(path):
            raise Exception(path + " is not a file")
        self.src = os.path.basename(path)
        # Required:
        #    TITLE
        #    DATE
        #    POSTID
        self.title = None
        self.timestamp = None
        self.tzinfo = None
        self.postid = None
        # Suggested:
        #    SUMMARY
        #    CATEGORIES
        #    MODE
        # Everything else is ignored
        self.summary = ''
        self.category_list = []
        self.post = None  # content

        self.next = None  # pointer to next in sequence
        self.prev = None  # pointer to previous in sequence

        mode = 'markdown'
        with open(path,'r') as f:
            while True:
                sline = f.readline().strip()
                if sline == '':
                    break
                if '=' not in sline:
                    sys.stderr.write(sline + '\n') # error
                    continue
                key, value = sline.split('=',1)
                value = value.strip()
                if value == '':
                    continue
                if key == 'TITLE':
                    self.title = value
                elif key == 'DATE':
                    self.timestamp = datetime.datetime.fromisoformat(re.sub(' *\(.*\)$', '', value))
                    tzinfo_match = re.search('\((.*)\)', value)
                    if tzinfo_match is not None:
                        self.tzinfo = tzinfo_match.group(1)
                elif key == 'POSTID':
                    self.postid = value
                elif key == 'SUMMARY':
                    self.summary = value
                elif key == 'CATEGORIES':
                    self.category_list = [x for x in filter(len, value.split(';'))]
                elif key == 'MODE':
                    mode = value
                elif key != 'COPYRIGHT':
                    sys.stderr.write('%s: %r=%r\n' % (path, key, value))

            if mode.lower() == 'markdown':
                self.post = wohc.pipe_process(f.read(), wohc.MARKDOWN_CMD).rstrip()
            else:
                self.post = f.read().rstrip()

        if self.timestamp is None:
            raise Exception('DATE missing ({})'.format(path))
        if self.postid is None:
            raise Exception('POSTID missing ({})'.format(path))
        if self.title is None:
            raise Exception('TITLE missing ({})'.format(path))

        if not self.category_list:
            self.category_list.append('uncategorized')


    def date(self):
        if self.tzinfo is None:
            return self.timestamp.isoformat(' ')
        return '%s (%s)' % (self.timestamp.isoformat(' '), self.tzinfo)

    def fragmentId(self):
        return '{:04d}/{:02d}/{:02d}/{:s}'.format(
            self.timestamp.year, self.timestamp.month, self.timestamp.day, self.postid)

    def permalinkpart(self):
        return '{:s}/{}/'.format(BASE_DIR, self.fragmentId())


    def write_to_file(self, output_path):
        def linker(post, s):
            return '({}<a href="/{}">{}</a>)'.format(s, post.permalinkpart(), post.title) if post else None

        up = '(<a href="/{}/archives/">back</a>)'.format(BASE_DIR)
        with UpdatingFile(OUTPUT_DIR + '/' + output_path) as o:
            o.write('<!DOCTYPE html>\n<html lang="en">\n')
            o.write(head(title='Voder-Vocoder: ' + self.title, years=get_years()))
            o.write('\n<body>\n')
            self.write(o, 1)
            o.write('<nav>\n')
            o.write(lcr(linker(self.prev, 'older: '), up, linker(self.next, 'newer: ')))
            o.write('\n</nav>\n</body>\n</html>')

class RecentPosts(object):
    def __init__(self):
        self.posts = []
    def addPost(self, post):
        self.posts.append(post)
    def close(self):
        def linker(post, s):
            return '({}<a href="/{}">{}</a>)'.format(s, post.permalinkpart(), post.title) if post else None
        with UpdatingFile('{}/{}/index.html'.format(OUTPUT_DIR, BASE_DIR)) as o:
            o.write('<!DOCTYPE html>\n<html lang="en">\n')
            o.write(head(title='Voder-Vocoder', years=get_years()))
            o.write('\n<body>\n')
            o.write(top_posts_header)
            o.write('<nav>\n<ul class="flat">\n')
            for post in self.posts:
                o.write('<li><a href="#{}">{}</a></li>\n'.format(post.fragmentId(), post.title))
            o.write('</ul>\n</nav>\n<hr>\n<div role="main">\n')
            for post in self.posts:
                post.write(o, 2)
            o.write('</div>\n')
            o.write('<nav aria-label="External Navigation">\n')
            o.write(lcr(linker(self.posts[-1].prev, 'older: '), '(<a href="archives/">ALL POSTS</a>)', ''))
            o.write('</nav>\n</body>\n</html>\n')

def writeIndex(loc, title, post_list, prev_next):
    posts = index_by_keyfn(post_list, lambda p: [p.timestamp.year])
    with UpdatingFile(OUTPUT_DIR + '/' + loc) as o:
        o.write('<!DOCTYPE html>\n<html lang="en">\n')
        o.write(head(title=title, years=get_years()))
        o.write('\n<body>\n')
        o.write('\n<h1>{}</h1>\n\n'.format(title.replace('\n', '<br>')))
        o.write('<div role="main">\n')
        for year in sorted(posts.keys(), reverse=True):
            year_posts = posts[year]
            if len(posts) > 1:
                o.write('<h2>{year:d}</h2>\n'.format(year=year))
            o.write('<ul>\n')
            for post in year_posts:
                s = '  <div>{}</div>'.format(post.summary) if post.summary else ''
                fmt = '<li>\n  <a href="/{permalinkpart}">{title}</a>\n  {date}\n{s}\n</li>\n'
                o.write(fmt.format(s=s, permalinkpart=post.permalinkpart(), date=post.date(), **vars(post)))
            o.write('</ul>\n\n')
        o.write('</div>\n')
        previ, nexti = prev_next
        o.write('<hr>\n')
        up = '(<a href="../">UP</a>)'

        def linker(key):
            if not key:
                return None
            if not isinstance(key, tuple):
                key = (key,)
            k = tuple('{:02d}'.format(e) for e in key)
            u, v = '/'.join(k), '-'.join(k)
            return '(<a href="/{}/{}/">{}</a>)'.format(BASE_DIR, u, v)
        o.write('<nav>\n')
        o.write(lcr(linker(previ), up, linker(nexti)))
        o.write('\n</nav>\n\n</body>\n</html>\n')

def listdir(path, reverse=False):
    assert os.path.isdir(path)
    files = os.listdir(path)
    files.sort(reverse=reverse)
    for fn in files:
        yield os.path.join(path, fn)

def makelinks(values):
    result = dict()
    sv = sorted(values)
    for i, v in enumerate(sv):
        result[v] = ( sv[i - 1] if i > 0 else None,
                      sv[i + 1] if i + 1 < len(sv) else None )
    return result

def index_by_keyfn(posts, keys_fn):
    result = dict()
    for post in posts:
        for key in keys_fn(post):
            result.setdefault(key, []).append(post)
    return result

def main():
    src_dir = os.path.abspath(os.path.dirname(__file__))
    target_location = os.path.join(src_dir, os.pardir)
    source_location = os.path.join(src_dir, 'BlogSrc')

    directory = source_location
    os.chdir(target_location)
    assert os.path.isdir(directory)
    recentPosts = RecentPosts()
    all_posts = []
    for path in listdir(directory, reverse=True):
        if path[-1] == '~':
            continue
        if os.path.isfile(path):
            all_posts.append(Post(path))
        else:
            sys.stderr.write("???? %s\n" % path)

    for i, post in enumerate(all_posts):
        post.next = all_posts[i - 1] if i > 0 else None
        post.prev = all_posts[i + 1] if i + 1 < len(all_posts) else None
        if i < 10:
            recentPosts.addPost(post)

    posts_by_year     = index_by_keyfn(all_posts, lambda p: [p.timestamp.year])
    posts_by_month    = index_by_keyfn(all_posts, lambda p: [(p.timestamp.year, p.timestamp.month)])
    posts_by_day      = index_by_keyfn(all_posts, lambda p: [(p.timestamp.year, p.timestamp.month, p.timestamp.day)])
    posts_by_category = index_by_keyfn(all_posts, lambda p: p.category_list)

    global first_year
    first_year = min(posts_by_year.keys())


    with UpdatingFile('{}/{}/rss.rss'.format(OUTPUT_DIR, BASE_DIR)) as o:
        makeRSS(o, all_posts)

    year_links = makelinks(posts_by_year.keys())
    for year, posts in posts_by_year.items():
        writeIndex('{}/{:04d}/index.html'.format(BASE_DIR, year),
                   'Voder-Vocoder Archive\n{:04d}'.format(year),
                   posts,
                   year_links[year])

    month_links = makelinks(posts_by_month.keys())
    for (year, month), posts in posts_by_month.items():
        writeIndex('{}/{:04d}/{:02d}/index.html'.format(BASE_DIR, year, month),
                   'Voder-Vocoder Archive\n{:04d}-{:02d}'.format(year, month),
                   posts,
                   month_links[(year, month)])

    day_links = makelinks(posts_by_day.keys())
    for (year, month, day), posts in posts_by_day.items():
        writeIndex('{}/{:04d}/{:02d}/{:02d}/index.html'.format(BASE_DIR, year, month, day),
                   'Voder-Vocoder Archive\n{:04d}-{:02d}-{:02d}'.format(year, month, day),
                   posts,
                   day_links[(year, month, day)])

    for cat, posts in posts_by_category.items():
        writeIndex('{}/category/{}/index.html'.format(BASE_DIR, cat),
                   'Voder-Vocoder Archive\n#{}'.format(cat),
                   posts,
                   (None, None))

    writeIndex('{}/archives/index.html'.format(BASE_DIR),
               'Voder-Vocoder Archives',
                all_posts,
                (None, None))


    for post in all_posts:
        post.write_to_file(post.permalinkpart() + 'index.html')

    recentPosts.close()

    with UpdatingFile('{}/{}/category/index.html'.format(OUTPUT_DIR, BASE_DIR)) as o:
        o.write('<!DOCTYPE html>\n<html lang="en">\n')
        o.write(head(title='categories', years=get_years()))
        o.write('\n<body>\n')
        o.write(
            '<h1><a href="/{}/" class="hiddenlink">Voder-Vocoder</a> Archive by Category</h1>'.format(
            BASE_DIR))
        o.write("\n\n<ul>\n")
        for cat, posts in sorted(posts_by_category.items()):
            o.write('<li><a href="/{0}/category/{1}/">#{1} ({2})</a></li>\n'.format(
                    BASE_DIR, cat, len(posts)))
        o.write(('</ul>\n<hr>\n' +
                '<p class="centered"><a href="/{}/">BACK</a></p>\n' +
                '</body>\n</html>\n').format(BASE_DIR))

if __name__ == '__main__':
    main()
